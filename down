#!/usr/bin/env python3

import json
import sys
import urllib.parse
import sqlite3
import os
import argparse
import itertools

import requests


conn = sqlite3.connect('data.db', timeout=sys.float_info.max)
cur = conn.cursor()

parser = argparse.ArgumentParser()
parser.add_argument('URL', help='https://onedrive.live.com/?authkey=XXXXX&id=XXXXX&cid=XXXXX')
parser.add_argument('-f', '--force-dirs', action='store_true', help='crawls through directories even if they are unchanged')
args = parser.parse_args()

def download_onedrive_folder(authkey, id, cid, folder):
    print(authkey, id, cid, folder)
    data = {
        'gb': '0,1,2',
        'd': 1,
        'authKey': authkey,
        'id': id,
        'cid': cid,
        'ps': 2500 # max page size
    }

    headers = {
        'AppId': '1141147648',
        'Accept': 'application/json'
    }

    for count in itertools.count(data['ps'], data['ps']):
        try:
            response = requests.get('https://skyapi.onedrive.live.com/API/2/GetItems', params=data, headers=headers)
            response.raise_for_status()
        except requests.exceptions.HTTPError as e:
            print(e)
            print(e.response.text)
            exit()
        for item in response.json()['items']:
            if 'folder' in item:
                for child in item['folder']['children']:

                    # check etag if child is a folder and force-dirs is true or if child is not a folder
                    if (child['itemType'] == 32 and not args.force_dirs) or child['itemType'] != 32:
                        # check if local copy is up to date
                        cur.execute('SELECT etag FROM download WHERE id = ?', (child['id'],))
                        rows = cur.fetchall()
                        if len(rows) == 1 and rows[0][0] == child['eTag']:
                            continue

                    # if folder
                    if child['itemType'] == 32:
                        path = folder + '/' + item['name'] + '/' + child['name']
                        os.makedirs(path, exist_ok=True)
                        print(path)
                        download_onedrive_folder(data['authKey'], child['id'], child['resourcePartitionCid'], path)
                    # if file
                    elif child['itemType'] == 1:
                        path = folder + '/' + child['name']
                        if 'extension' in child:
                            path += child['extension']
                        print(path)
                        response = requests.get(child['urls']['download'])
                        response.raise_for_status()
                        with open(path, 'wb') as f:
                            f.write(response.content)
                    else:
                        raise Exception('Unknown itemType ' + str(item['itemType']))

                    # store Etag
                    cur.execute('INSERT OR REPLACE INTO download(id, etag) VALUES(?,?)', (child['id'], child['eTag']))
                    conn.commit()

                if count < item['folder']['childCount']:
                    data['si'] = count
                else:
                    return

def _fetch_root_dir_absolute_id(cid):
    response = requests.get("https://api.onedrive.com/v1.0/drives/"+cid+"/items/root")
    response.raise_for_status()
    return response.json()['id']

def download_children_of_root_folder(authkey, cid, folder):
    # fetch children of root folder
    response = requests.get("https://api.onedrive.com/v1.0/drives/"+cid[0]+"/items/root/children?authkey="+authkey+"&cid="+cid[0])
    response.raise_for_status()

    for item in response.json()['value']:
        download_onedrive_folder(authkey, item['id'], cid, folder)


cur.execute('''CREATE TABLE IF NOT EXISTS download(
    id TEXT NOT NULL PRIMARY KEY,
    etag TEXT NOT NULL
)''')

url = urllib.parse.urlparse(args.URL)
params = urllib.parse.parse_qs(url.query)

data = {
    'authKey': urllib.parse.unquote(params['authkey'][0]),
    'id': urllib.parse.unquote(params['id'][0]),
    'cid': params['cid']
}

# root folders don't always have access permissions
# i treat them differently
if data['id'] == 'root':
    download_children_of_root_folder(data['authKey'], data['cid'], 'downloads')
else:
    download_onedrive_folder(data['authKey'], data['id'], data['cid'], 'downloads')
